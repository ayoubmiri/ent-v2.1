{"ast":null,"code":"export const auth = {\n  async login(credentials) {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Mock response based on credentials\n    if (credentials.email === 'etudiant@estsale.ma' && credentials.password === 'Etudiant123') {\n      return {\n        id: 'EST12345',\n        nom: 'El Amrani',\n        prenom: 'Ahmed',\n        email: 'etudiant@estsale.ma',\n        role: 'etudiant',\n        token: 'mock-token-for-student'\n      };\n    } else if (credentials.email === 'enseignant@estsale.ma' && credentials.password === 'Enseignant123') {\n      return {\n        id: 'ENS78901',\n        nom: 'Benali',\n        prenom: 'Fatima',\n        email: 'enseignant@estsale.ma',\n        role: 'enseignant',\n        token: 'mock-token-for-teacher'\n      };\n    } else {\n      throw new Error('Invalid credentials');\n    }\n  },\n  async logout() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n  },\n  async checkAuth() {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    // In a real app, you would verify the token here\n    // For our mock, we'll just return true if there's a user in localStorage\n    return localStorage.getItem('estSaleUser') ? JSON.parse(localStorage.getItem('estSaleUser')) : null;\n  }\n};","map":{"version":3,"names":["auth","login","credentials","Promise","resolve","setTimeout","email","password","id","nom","prenom","role","token","Error","logout","checkAuth","localStorage","getItem","JSON","parse"],"sources":["C:/Users/ayoub/OneDrive/Bureau/est-sale-frontend/src/services/auth.js"],"sourcesContent":["export const auth = {\r\n    async login(credentials) {\r\n      // Simulate API call delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // Mock response based on credentials\r\n      if (credentials.email === 'etudiant@estsale.ma' && credentials.password === 'Etudiant123') {\r\n        return {\r\n          id: 'EST12345',\r\n          nom: 'El Amrani',\r\n          prenom: 'Ahmed',\r\n          email: 'etudiant@estsale.ma',\r\n          role: 'etudiant',\r\n          token: 'mock-token-for-student'\r\n        };\r\n      } else if (credentials.email === 'enseignant@estsale.ma' && credentials.password === 'Enseignant123') {\r\n        return {\r\n          id: 'ENS78901',\r\n          nom: 'Benali',\r\n          prenom: 'Fatima',\r\n          email: 'enseignant@estsale.ma',\r\n          role: 'enseignant',\r\n          token: 'mock-token-for-teacher'\r\n        };\r\n      } else {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n    },\r\n  \r\n    async logout() {\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n    },\r\n  \r\n    async checkAuth() {\r\n      await new Promise(resolve => setTimeout(resolve, 800));\r\n      // In a real app, you would verify the token here\r\n      // For our mock, we'll just return true if there's a user in localStorage\r\n      return localStorage.getItem('estSaleUser') ? JSON.parse(localStorage.getItem('estSaleUser')) : null;\r\n    }\r\n  };"],"mappings":"AAAA,OAAO,MAAMA,IAAI,GAAG;EAChB,MAAMC,KAAKA,CAACC,WAAW,EAAE;IACvB;IACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;IAEvD;IACA,IAAIF,WAAW,CAACI,KAAK,KAAK,qBAAqB,IAAIJ,WAAW,CAACK,QAAQ,KAAK,aAAa,EAAE;MACzF,OAAO;QACLC,EAAE,EAAE,UAAU;QACdC,GAAG,EAAE,WAAW;QAChBC,MAAM,EAAE,OAAO;QACfJ,KAAK,EAAE,qBAAqB;QAC5BK,IAAI,EAAE,UAAU;QAChBC,KAAK,EAAE;MACT,CAAC;IACH,CAAC,MAAM,IAAIV,WAAW,CAACI,KAAK,KAAK,uBAAuB,IAAIJ,WAAW,CAACK,QAAQ,KAAK,eAAe,EAAE;MACpG,OAAO;QACLC,EAAE,EAAE,UAAU;QACdC,GAAG,EAAE,QAAQ;QACbC,MAAM,EAAE,QAAQ;QAChBJ,KAAK,EAAE,uBAAuB;QAC9BK,IAAI,EAAE,YAAY;QAClBC,KAAK,EAAE;MACT,CAAC;IACH,CAAC,MAAM;MACL,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IACxC;EACF,CAAC;EAED,MAAMC,MAAMA,CAAA,EAAG;IACb,MAAM,IAAIX,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;EACxD,CAAC;EAED,MAAMW,SAASA,CAAA,EAAG;IAChB,MAAM,IAAIZ,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACtD;IACA;IACA,OAAOY,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,GAAG,IAAI;EACrG;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}