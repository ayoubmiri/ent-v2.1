{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayoub\\\\OneDrive\\\\Bureau\\\\ENT-V2.0\\\\est-sale-frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/AuthContext.js\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport Keycloak from 'keycloak-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [keycloak, setKeycloak] = useState(null);\n  const [authenticated, setAuthenticated] = useState(false);\n  useEffect(() => {\n    const initKeycloak = async () => {\n      const keycloakInstance = new Keycloak({\n        url: process.env.REACT_APP_KEYCLOAK_URL || 'http://localhost:8080',\n        realm: process.env.REACT_APP_KEYCLOAK_REALM || 'mon-realm',\n        clientId: process.env.REACT_APP_KEYCLOAK_CLIENT_ID || 'react-client'\n      });\n      try {\n        const auth = await keycloakInstance.init({\n          onLoad: 'check-sso',\n          checkLoginIframe: false\n        });\n        setKeycloak(keycloakInstance);\n        setAuthenticated(auth);\n      } catch (error) {\n        console.error('Keycloak initialization error:', error);\n      }\n    };\n    initKeycloak();\n  }, []);\n  const login = () => keycloak === null || keycloak === void 0 ? void 0 : keycloak.login();\n  const logout = () => keycloak === null || keycloak === void 0 ? void 0 : keycloak.logout();\n  const value = {\n    keycloak,\n    authenticated,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"qhsrASnmQMSmHJaHPbGdp9NFmHo=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","Keycloak","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","keycloak","setKeycloak","authenticated","setAuthenticated","initKeycloak","keycloakInstance","url","process","env","REACT_APP_KEYCLOAK_URL","realm","REACT_APP_KEYCLOAK_REALM","clientId","REACT_APP_KEYCLOAK_CLIENT_ID","auth","init","onLoad","checkLoginIframe","error","console","login","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/ayoub/OneDrive/Bureau/ENT-V2.0/est-sale-frontend/src/contexts/AuthContext.js"],"sourcesContent":["// src/contexts/AuthContext.js\r\nimport { createContext, useContext, useEffect, useState } from 'react';\r\nimport Keycloak from 'keycloak-js';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [keycloak, setKeycloak] = useState(null);\r\n  const [authenticated, setAuthenticated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const initKeycloak = async () => {\r\n      const keycloakInstance = new Keycloak({\r\n        url: process.env.REACT_APP_KEYCLOAK_URL || 'http://localhost:8080',\r\n        realm: process.env.REACT_APP_KEYCLOAK_REALM || 'mon-realm',\r\n        clientId: process.env.REACT_APP_KEYCLOAK_CLIENT_ID || 'react-client'\r\n      });\r\n\r\n      try {\r\n        const auth = await keycloakInstance.init({ \r\n          onLoad: 'check-sso',\r\n          checkLoginIframe: false\r\n        });\r\n        \r\n        setKeycloak(keycloakInstance);\r\n        setAuthenticated(auth);\r\n      } catch (error) {\r\n        console.error('Keycloak initialization error:', error);\r\n      }\r\n    };\r\n\r\n    initKeycloak();\r\n  }, []);\r\n\r\n  const login = () => keycloak?.login();\r\n  const logout = () => keycloak?.logout();\r\n\r\n  const value = {\r\n    keycloak,\r\n    authenticated,\r\n    login,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":";;;AAAA;AACA,SAASA,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACtE,OAAOC,QAAQ,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,WAAW,gBAAGP,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEzDD,SAAS,CAAC,MAAM;IACd,MAAMa,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,MAAMC,gBAAgB,GAAG,IAAIZ,QAAQ,CAAC;QACpCa,GAAG,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,uBAAuB;QAClEC,KAAK,EAAEH,OAAO,CAACC,GAAG,CAACG,wBAAwB,IAAI,WAAW;QAC1DC,QAAQ,EAAEL,OAAO,CAACC,GAAG,CAACK,4BAA4B,IAAI;MACxD,CAAC,CAAC;MAEF,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMT,gBAAgB,CAACU,IAAI,CAAC;UACvCC,MAAM,EAAE,WAAW;UACnBC,gBAAgB,EAAE;QACpB,CAAC,CAAC;QAEFhB,WAAW,CAACI,gBAAgB,CAAC;QAC7BF,gBAAgB,CAACW,IAAI,CAAC;MACxB,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD;IACF,CAAC;IAEDd,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMgB,KAAK,GAAGA,CAAA,KAAMpB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEoB,KAAK,CAAC,CAAC;EACrC,MAAMC,MAAM,GAAGA,CAAA,KAAMrB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEqB,MAAM,CAAC,CAAC;EAEvC,MAAMC,KAAK,GAAG;IACZtB,QAAQ;IACRE,aAAa;IACbkB,KAAK;IACLC;EACF,CAAC;EAED,oBACE1B,OAAA,CAACC,WAAW,CAAC2B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAxB,QAAA,EAChCA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC5B,EAAA,CA3CWF,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AA6CzB,OAAO,MAAMgC,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGzC,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACmC,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}