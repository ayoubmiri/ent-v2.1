{"ast":null,"code":"import Keycloak from 'keycloak-js';\n\n// Singleton instance\nlet keycloakInstance = null;\nconst initKeycloak = (options = {}) => {\n  if (!keycloakInstance) {\n    const config = {\n      url: `${window.location.hostname === 'localhost' ? process.env.REACT_APP_BROWSER_KEYCLOAK_URL : process.env.REACT_APP_KEYCLOAK_URL}/auth`,\n      realm: process.env.REACT_APP_REALM,\n      clientId: process.env.REACT_APP_CLIENT_ID\n    };\n    keycloakInstance = new Keycloak(config);\n\n    // Initialize with default options if needed\n    keycloakInstance.init({\n      onLoad: 'check-sso',\n      pkceMethod: 'S256',\n      checkLoginIframe: false,\n      ...options\n    }).catch(console.error);\n  }\n  return keycloakInstance;\n};\nexport const keycloak = initKeycloak({\n  onLoad: 'check-sso'\n});","map":{"version":3,"names":["Keycloak","keycloakInstance","initKeycloak","options","config","url","window","location","hostname","process","env","REACT_APP_BROWSER_KEYCLOAK_URL","REACT_APP_KEYCLOAK_URL","realm","REACT_APP_REALM","clientId","REACT_APP_CLIENT_ID","init","onLoad","pkceMethod","checkLoginIframe","catch","console","error","keycloak"],"sources":["C:/Users/ayoub/OneDrive/Bureau/ENT-V2.0/est-sale-frontend/src/keycloak.js"],"sourcesContent":["import Keycloak from 'keycloak-js';\r\n\r\n// Singleton instance\r\nlet keycloakInstance = null;\r\n\r\nconst initKeycloak = (options = {}) => {\r\n  if (!keycloakInstance) {\r\n    const config = {\r\n      url: `${window.location.hostname === 'localhost' \r\n        ? process.env.REACT_APP_BROWSER_KEYCLOAK_URL \r\n        : process.env.REACT_APP_KEYCLOAK_URL}/auth`,\r\n      realm: process.env.REACT_APP_REALM,\r\n      clientId: process.env.REACT_APP_CLIENT_ID\r\n    };\r\n\r\n    keycloakInstance = new Keycloak(config);\r\n    \r\n    // Initialize with default options if needed\r\n    keycloakInstance.init({\r\n      onLoad: 'check-sso',\r\n      pkceMethod: 'S256',\r\n      checkLoginIframe: false,\r\n      ...options\r\n    }).catch(console.error);\r\n  }\r\n  return keycloakInstance;\r\n};\r\n\r\nexport const keycloak = initKeycloak({ onLoad: 'check-sso' });"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,aAAa;;AAElC;AACA,IAAIC,gBAAgB,GAAG,IAAI;AAE3B,MAAMC,YAAY,GAAGA,CAACC,OAAO,GAAG,CAAC,CAAC,KAAK;EACrC,IAAI,CAACF,gBAAgB,EAAE;IACrB,MAAMG,MAAM,GAAG;MACbC,GAAG,EAAE,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW,GAC5CC,OAAO,CAACC,GAAG,CAACC,8BAA8B,GAC1CF,OAAO,CAACC,GAAG,CAACE,sBAAsB,OAAO;MAC7CC,KAAK,EAAEJ,OAAO,CAACC,GAAG,CAACI,eAAe;MAClCC,QAAQ,EAAEN,OAAO,CAACC,GAAG,CAACM;IACxB,CAAC;IAEDf,gBAAgB,GAAG,IAAID,QAAQ,CAACI,MAAM,CAAC;;IAEvC;IACAH,gBAAgB,CAACgB,IAAI,CAAC;MACpBC,MAAM,EAAE,WAAW;MACnBC,UAAU,EAAE,MAAM;MAClBC,gBAAgB,EAAE,KAAK;MACvB,GAAGjB;IACL,CAAC,CAAC,CAACkB,KAAK,CAACC,OAAO,CAACC,KAAK,CAAC;EACzB;EACA,OAAOtB,gBAAgB;AACzB,CAAC;AAED,OAAO,MAAMuB,QAAQ,GAAGtB,YAAY,CAAC;EAAEgB,MAAM,EAAE;AAAY,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}