{"ast":null,"code":"// Mock auth service - replace with real implementation\nexport const auth = {\n  async login(credentials) {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Mock response based on credentials\n    if (credentials.email.includes('etudiant')) {\n      return {\n        id: 'EST12345',\n        nom: 'El Amrani',\n        prenom: 'Ahmed',\n        email: credentials.email,\n        role: 'etudiant',\n        token: 'mock-token-for-student'\n      };\n    } else if (credentials.email.includes('enseignant')) {\n      return {\n        id: 'ENS78901',\n        nom: 'Benali',\n        prenom: 'Fatima',\n        email: credentials.email,\n        role: 'enseignant',\n        token: 'mock-token-for-teacher'\n      };\n    } else {\n      throw new Error('Invalid credentials');\n    }\n  },\n  async logout() {\n    // Simulate logout\n    await new Promise(resolve => setTimeout(resolve, 500));\n  },\n  async checkAuth() {\n    // Simulate checking auth status\n    await new Promise(resolve => setTimeout(resolve, 800));\n\n    // Return null to simulate logged out state\n    // In a real app, you would check for a valid token\n    return null;\n  }\n};","map":{"version":3,"names":["auth","login","credentials","Promise","resolve","setTimeout","email","includes","id","nom","prenom","role","token","Error","logout","checkAuth"],"sources":["C:/Users/ayoub/OneDrive/Bureau/est-sale-frontend/src/services/auth.js"],"sourcesContent":["// Mock auth service - replace with real implementation\r\nexport const auth = {\r\n    async login(credentials) {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // Mock response based on credentials\r\n      if (credentials.email.includes('etudiant')) {\r\n        return {\r\n          id: 'EST12345',\r\n          nom: 'El Amrani',\r\n          prenom: 'Ahmed',\r\n          email: credentials.email,\r\n          role: 'etudiant',\r\n          token: 'mock-token-for-student'\r\n        };\r\n      } else if (credentials.email.includes('enseignant')) {\r\n        return {\r\n          id: 'ENS78901',\r\n          nom: 'Benali',\r\n          prenom: 'Fatima',\r\n          email: credentials.email,\r\n          role: 'enseignant',\r\n          token: 'mock-token-for-teacher'\r\n        };\r\n      } else {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n    },\r\n  \r\n    async logout() {\r\n      // Simulate logout\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n    },\r\n  \r\n    async checkAuth() {\r\n      // Simulate checking auth status\r\n      await new Promise(resolve => setTimeout(resolve, 800));\r\n      \r\n      // Return null to simulate logged out state\r\n      // In a real app, you would check for a valid token\r\n      return null;\r\n    }\r\n  };"],"mappings":"AAAA;AACA,OAAO,MAAMA,IAAI,GAAG;EAChB,MAAMC,KAAKA,CAACC,WAAW,EAAE;IACvB;IACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;IAEvD;IACA,IAAIF,WAAW,CAACI,KAAK,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;MAC1C,OAAO;QACLC,EAAE,EAAE,UAAU;QACdC,GAAG,EAAE,WAAW;QAChBC,MAAM,EAAE,OAAO;QACfJ,KAAK,EAAEJ,WAAW,CAACI,KAAK;QACxBK,IAAI,EAAE,UAAU;QAChBC,KAAK,EAAE;MACT,CAAC;IACH,CAAC,MAAM,IAAIV,WAAW,CAACI,KAAK,CAACC,QAAQ,CAAC,YAAY,CAAC,EAAE;MACnD,OAAO;QACLC,EAAE,EAAE,UAAU;QACdC,GAAG,EAAE,QAAQ;QACbC,MAAM,EAAE,QAAQ;QAChBJ,KAAK,EAAEJ,WAAW,CAACI,KAAK;QACxBK,IAAI,EAAE,YAAY;QAClBC,KAAK,EAAE;MACT,CAAC;IACH,CAAC,MAAM;MACL,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IACxC;EACF,CAAC;EAED,MAAMC,MAAMA,CAAA,EAAG;IACb;IACA,MAAM,IAAIX,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;EACxD,CAAC;EAED,MAAMW,SAASA,CAAA,EAAG;IAChB;IACA,MAAM,IAAIZ,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;;IAEtD;IACA;IACA,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}